---
title: "Reproducible documents"
author: "Johanne Sloth Lauszus"
format: html
---

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(here::here("data/post-meal-insulin.csv"))
small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)
tidier_post_meal_data <- small_post_meal_data %>%
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) %>%
  filter(glykemi == 0) %>%
  select(-glykemi)
tidied_post_meal_data <- tidier_post_meal_data %>%
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree-relative")
  )
```
## About me
- Johanne
- AU
- LMT

I am a *phd student* and I am **very** new to R

## Simple code

```{r}
3 * 3
```

```{r}
2 + 2
```

## Testing of git
I just want to test this 

## Showing the data
```{r}
post_meal_data
glimpse(post_meal_data)
```
## PLot one continuous variable

```{r}
#| message: false
#| warning: false
#| fig-cap: "Distribution of BMI."
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
## Exercise: discrete plots
```{r}
#| fig-cap: "Glykemi among patients"
#| label: fig-glykemi-bar
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```
See @fig-glykemi-bar above for a cool plot!

## Plotting two discrete variables

```{r}
ggplot(post_meal_data, aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```
## side by side plots
```{r}
#| message: false
#| warning: false
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side"
#| fig-subcap:
#| - "Distribution of BMI"
#| - "Number of those with glycemia"
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

## Plotting two continuous variables
```{r}
#| message: false
#| warning: false
#| fig-cap: "BMI and area under the curve"
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```
## Selecting data
```{r}
select(post_meal_data, Age, BMI, Weight)
```
```{r}
select(post_meal_data, -Group)
```
## Select helpers
```{r}
select(post_meal_data, starts_with("PG"))
```
```{r}
select(post_meal_data, ends_with("DXA"))
```
```{r}
select(post_meal_data, contains("0"))
```
## Renaiming columns
```{r}
small_post_meal_data %>%
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```
## Select and rename tasks
```{r}
post_meal_data %>%
  select(contains("OGTT"))
```
```{r}
post_meal_data %>%
  select(
    contains(".."),
    -contains("...")
  )
```

```{r}
post_meal_data %>%
  rename(
    P.GLucose.minus5.OGTT = P.Glucose..5.OGTT,
    Insulin.minus5.OGTT.X = Insulin..5.OGTT.X
  )
```
```{r}
post_meal_data %>%
  select(id, BMI, Length, Weight, Age) %>%
  rename(Height = Length)
```
## Filtering data
```{r}
small_post_meal_data %>%
  filter(glykemi == 1)
```
```{r}
small_post_meal_data %>%
  filter(BMI >= 25)
```

```{r}
small_post_meal_data %>%
  filter(Group == "CTR")
```
```{r}
small_post_meal_data %>%
  filter(
    Group == "CTR",
    BMI >= 25
  )
```
```{r}
small_post_meal_data |>
  filter(Group == "CTR" | BMI >= 25)
```
## Modifying columns
```{r}
tidier_post_meal_data %>%
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```
## Practice with filter and mutate
```{r}
post_meal_data %>%
  filter(
    BMI >= 25,
    BMI <= 40,
    Group == "FDR"
  )
```
```{r}
post_meal_data %>%
  mutate(percent_body_fat = ((Fat.mass.DXA / Weight) * 100)) %>%
  filter(percent_body_fat > 30)
```
## Visualizing with a jitter plot

```{r}
tidied_post_meal_data |>
  mutate(overweight = if_else(BMI >= 25, "Overweight", "Not overweight")) |>
  ggplot(aes(x = overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```
## Plotting three or more variables
```{r}
tidied_post_meal_data %>%
  filter(BMI < 30) %>%
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point()
```
```{r}
tidied_post_meal_data %>%
  filter(BMI < 30) %>%
  mutate(young = if_else(Age < 40, "Young", "Old")) %>%
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(cols = vars(young))
```
```{r}
tidied_post_meal_data %>%
  filter(BMI < 30) %>%
  mutate(young = if_else(Age < 40, "Young", "Old")) %>%
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young))
```
```{r}
tidied_post_meal_data %>%
  filter(BMI < 30) %>%
  mutate(young = if_else(Age < 40, "Young", "Old")) %>%
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young)) +
  labs(
    x = "Body mass index (BMI)",
    y = "Insulin to glucose ratio"
  )
```
## Multidimesional plots
```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, multi-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2

post_meal_data %>%
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "Old")
  ) %>%
  ggplot(aes(x = Group, y = percent_body_fat, colour = young)) +
  geom_jitter(width = 0.2)

post_meal_data %>%
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) %>%
  ggplot(aes(x = BMI, y = Bone.mineral.DXA, colour = insulin_insensitive)) +
  geom_point() +
  geom_smooth() +
  facet_grid(rows = vars(insulin_insensitive))
```
## Changing colours
```{r}
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis")
```
```{r}
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c(option = "inferno")
```
## Calculating summary statistics
```{r}
tidied_post_meal_data %>%
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```
## Summarise with group by
```{r}
tidied_post_meal_data %>%
  group_by(Group) %>%
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) %>%
  ungroup()
```
## Creating tables
```{r}
tidied_post_meal_data %>%
  group_by(Group) %>%
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) %>%
  ungroup() %>%
  knitr::kable()
```
```{r}
#| label: tbl-mean-age-bmi
#| tbl-cap: "Mean values of Age and BMI for each group."
tidied_post_meal_data %>%
  group_by(Group) %>%
  summarise(
    "Mean age (yrs)" = round(mean(Age), 1),
    "Mean BMI (kg/m^2)" = round(mean(BMI), 1)
  ) %>%
  ungroup() %>%
  knitr::kable()
```
